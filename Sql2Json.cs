using System;
using System.IO;
using System.Data.Odbc;
using Newtonsoft.Json.Linq;
using System.Linq;

namespace sql2json
{
    [System.Serializable]
    public class StopException : System.Exception
    {
        public StopException() { }
        public StopException(string message) : base(message) { }
        public StopException(string message, System.Exception inner) : base(message, inner) { }
        protected StopException(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
    }

    public class Sql2Json
    {
        private readonly string[] parameter;
        private readonly OdbcConnection connection = new OdbcConnection();

        private string queryText = string.Empty;
        private string targetFile = string.Empty;
        public Sql2Json(string[] parameter)
        {
            this.parameter = parameter ?? throw new ArgumentNullException(nameof(parameter));
        }

        public Sql2Json Validate()
        {

            connection.ConnectionString = parameter[0];
            try
            {
                connection.Open();
                connection.Close();
            }
            catch (Exception ex)
            {
                Print(ex.ToString());
                Print("Unable to open a connection, using the provided connectionstring");
                throw new StopException();
            }

            try
            {
                if (File.Exists(parameter[1]))
                {
                    queryText = File.ReadAllText(parameter[1]);
                }
                else
                {
                    queryText = parameter[1];
                }
                if(string.IsNullOrEmpty(queryText?.Trim()))
                    throw new StopException();
            }
            catch (Exception)
            {
                Print("Unable to read the query from the provided path or the query was empty");
                throw new StopException();
            }

            if (parameter.Count() > 2)
            {
                if (File.Exists(parameter[2]))
                {
                    Print("WARNING target file exists");
                }
                targetFile = parameter[2];
            }
            else
            {
                targetFile = $"query_result_{DateTime.Now.Ticks}.json";
            }

            return this;
        }

        public Sql2Json Run()
        {
            try
            {
                connection.Open();
                var cmd = connection.CreateCommand();
                cmd.CommandText = queryText;
                using (OdbcDataReader reader = cmd.ExecuteReader())
                {
                    if (!reader.HasRows)
                    {
                        Print("No results generated by query");
                        throw new StopException();
                    }
                    else
                    {
                        var array = new JArray();
                        var totalRows = 0;
                        var totalColumns = reader.FieldCount;
                        while (reader.Read())
                        {
                            var newObject = new JObject();
                            for (var i = 0; i < totalColumns; ++i)
                            {
                                newObject[reader.GetName(i)] = JToken.FromObject(reader.GetValue(i));
                            }
                            array.Add(newObject);
                            totalRows++;
                        }
                        File.WriteAllText(targetFile, array.ToString());
                        Print($"Wrote {totalRows} records to ${targetFile}");
                    }
                }
            }
            catch (Exception ex)
            {
                Print($"Error: {ex.ToString()}");
                throw new StopException();
            }
            return this;
        }
        private void Print(string message)
        {
            Console.WriteLine(message);
        }
    }
}